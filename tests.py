from interpreterv3 import Interpreter

test10 = [
'func ifunc n:int int',
' return n',
'endfunc',
'',
'func sfunc s:string string',
' return s',
'endfunc',
'',
'func bfunc b:bool bool',
' return b',
'endfunc',
'',
'func main void',
'  var int i',
'  var string s',
'  var bool b',
'  var func f g h',
'  assign f ifunc',
'  assign g sfunc',
'  assign h bfunc',
'',
'  funccall f 42',
'  assign i resulti',
'  funccall print i',
'',
'  funccall g "foo"',
'  assign s results',
'  funccall print s',
'',
'  funccall h True',
'  assign b resultb',
'  funccall print b',
'',
'endfunc',
]

test1 = [
'func main void',
' var func a',
' assign a foo',
'endfunc',
'',
'func foo void',
' return',
'endfunc'
]

test2 = [
'func main void',
' var object a',
' assign a.a "test"',
' assign a.b 0',
' assign a.c False',
' var object b',
' assign b a',
' assign b.a "testing"',
' assign a.d foo',
' funccall print a.a',
' funccall print a.b',
' funccall print a.c',
' funccall b.d',
'endfunc',
'',
'func foo void',
' funccall print "Function foo reached"',
'endfunc'
]

test22 = [
'func foo func',
'  return bar ',
'endfunc foo',
'',
'func bar int',
'  return 5',
'endfunc',
'',
'func main void',
' var func f',
' funccall foo',
' assign f resultf',
' funccall f',
' funccall print resulti ',
'endfunc',
]

test_o_1 = [
'func main void',
' var object o',
' assign o.a 5',
' assign o.b "Testing"',
' if True',
'  funccall print o.a',
'  var object o',
'  assign o.a "Test"',
'  funccall print o.a',
'  assign o.c 10',
' endif',
' funccall print o.a',
' funccall print o.b',
' funccall print o.c',
'endfunc',
]

test_l_1 = [
'func foo func',
' var int c',
' assign c 10',
' lambda a:int int',
'  return + a c',
' endlambda',
' var func b',
' assign b resultf',
' funccall b 3',
' funccall print resulti',
' return resultf',
'endfunc',
'func main void',
' funccall print "Testing lambda"',
' funccall foo',
' var func c',
' assign c resultf',
' funccall c 5',
' funccall print resulti',
'endfunc',
]

machine = Interpreter(trace_output=False)
machine.run(test_o_1)